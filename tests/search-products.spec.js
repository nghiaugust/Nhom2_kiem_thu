// @ts-nocheck
import { test, expect } from '@playwright/test';

const BASE_URL = 'https://newday.com.vn/';

test.describe('New Day - T√¨m ki·∫øm s·∫£n ph·∫©m', () => {
  
  test.beforeEach(async ({ page }) => {
    await page.goto(BASE_URL);
    // ƒê·ª£i trang load ho√†n to√†n
    await page.waitForLoadState('load', );
  });

  test.describe('T√¨m ki·∫øm theo t·ª´ kh√≥a', () => {
    
    test('TC_SEARCH_001: T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m h·ª£p l·ªá - "√°o vest"', async ({ page }) => {
      // T√¨m √¥ search (c√≥ th·ªÉ l√† input ho·∫∑c search icon)
      const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
      
      if (await searchInput.count() > 0) {
        await searchInput.fill('√°o vest');
        await page.keyboard.press('Enter');
        
        // ƒê·ª£i k·∫øt qu·∫£ t√¨m ki·∫øm load
        await page.waitForLoadState('load', { timeout: 30000 });

        // Ki·ªÉm tra c√≥ k·∫øt qu·∫£ hi·ªÉn th·ªã
        const searchResults = page.locator('.product-detail, .product-card');
        await expect(searchResults.first()).toBeVisible();
        
        // Ki·ªÉm tra k·∫øt qu·∫£ c√≥ ch·ª©a t·ª´ kh√≥a
        const productTitles = page.locator('.product-title, .product-name, h3, h4');
        const count = await productTitles.count();
        
        if (count > 0) {
          const firstTitle = await productTitles.first().textContent();
          expect(firstTitle?.toLowerCase()).toContain('vest');
        }
      } else {
        console.log('Kh√¥ng t√¨m th·∫•y √¥ search, c√≥ th·ªÉ c·∫ßn click v√†o icon search tr∆∞·ªõc');
      }
    });

    test('TC_SEARCH_002: T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng', async ({ page }) => {
      const searchInputs = [
        '√ÅO VEST',
        '√°o vest', 
        '√Åo Vest'
      ];
      
      for (const searchTerm of searchInputs) {
        await page.goto(BASE_URL);
        await page.waitForLoadState('load', );
        
        const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
        
        if (await searchInput.count() > 0) {
          await searchInput.fill(searchTerm);
          await page.keyboard.press('Enter');
          await page.waitForLoadState('load', );
          
          const searchResults = page.locator('.product-detail, .product-card');
          await expect(searchResults.first()).toBeVisible();
        }
      }
    });

    test('TC_SEARCH_003: T√¨m ki·∫øm c√≥ d·∫•u/kh√¥ng d·∫•u', async ({ page }) => {
      const searchTerms = ['ƒë·∫ßm', 'dam'];
      
      for (const term of searchTerms) {
        await page.goto(BASE_URL);
        await page.waitForLoadState('load', );
        
        const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
        
        if (await searchInput.count() > 0) {
          await searchInput.fill(term);
          await page.keyboard.press('Enter');
          // T√¨m ki·∫øm v√† ch·ªù ƒëi·ªÅu h∆∞·ªõng
          await Promise.all([
            page.waitForLoadState('load', { timeout: 30000 }),
          ]);

          // ƒê·ª£i ph·∫ßn k·∫øt qu·∫£ xu·∫•t hi·ªán (c√≥ th·ªÉ t√πy ch·ªânh selector)
          await page.waitForSelector('.product-detail, .product-card', { timeout: 10000 });
          
          // C·∫£ hai t·ª´ kh√≥a ƒë·ªÅu n√™n cho k·∫øt qu·∫£ t∆∞∆°ng t·ª±
          const searchResults = page.locator('.product-detail, .product-card');
          const resultCount = await searchResults.count();
          
          console.log(`T√¨m ki·∫øm "${term}": ${resultCount} k·∫øt qu·∫£`);
        }
      }
    });

    test('TC_SEARCH_004: T√¨m ki·∫øm t·ª´ kh√≥a m·ªôt ph·∫ßn', async ({ page }) => {
      const partialKeywords = ['vest', 'qu·∫ßn', 'v√°y'];
      
      for (const keyword of partialKeywords) {
        await page.goto(BASE_URL);
        await page.waitForLoadState('load', );
        
        const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
        
        if (await searchInput.count() > 0) {
          await searchInput.fill(keyword);
          await page.keyboard.press('Enter');
          await page.waitForLoadState('load', );
          
          // ƒê·ª£i ph·∫ßn k·∫øt qu·∫£ xu·∫•t hi·ªán (c√≥ th·ªÉ t√πy ch·ªânh selector)
          await page.waitForSelector('.product-detail, .product-card', { timeout: 10000 });

          const searchResults = page.locator('.product-detail, .product-card');
          const resultCount = await searchResults.count();
          
          expect(resultCount).toBeGreaterThan(0);
        }
      }
    });
  });

  test.describe('B·ªô l·ªçc v√† s·∫Øp x·∫øp s·∫£n ph·∫©m', () => {
    

    test('TC_FILTER_001: Ki·ªÉm tra b·ªô l·ªçc theo size', async ({ page }) => {
      // V√†o trang c√≥ nhi·ªÅu s·∫£n ph·∫©m
      await page.goto(BASE_URL);

      // Click v√†o danh m·ª•c √ÅO VEST
      const MenuItem = page.locator('li.tp_menu_item', { hasText: '√ÅO VEST' });
      if (await MenuItem.count() > 0) {
        await MenuItem.first().click();

        // ƒê·ª£i trang load
        await Promise.all([
          page.waitForLoadState('load', { timeout: 30000 }),
        ]);
        const sizeFilters = page.locator(
          '.tp_product_category_filter_attribute ',{ hasText: 'K√≠ch th∆∞·ªõc' },
        );
        
        if (await sizeFilters.count() > 0) {
          const sizeS = page.locator('text="S"').first();
          
          if (await sizeS.isVisible()) {
            await sizeS.click();
            await page.waitForLoadState('load', );
            
            // Ki·ªÉm tra k·∫øt qu·∫£ c√≥ size S
            const products = page.locator('.product-detail, .product-card');

              const total = await products.count();
              let matchCount = 0;
              for (let i = 0; i < total; i++) {
                const product = products.nth(i);

                // Ki·ªÉm tra b√™n trong s·∫£n ph·∫©m c√≥ ch·ª©a ch·ªØ 'S' kh√¥ng (v√≠ d·ª•: size S hi·ªÉn th·ªã d∆∞·ªõi class .size-label ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng)
                const sizeLabel = product.locator('.product-detail, .product-info', {hasText: '- S'}); // t√πy v√†o DOM th·ª±c t·∫ø

                if (await sizeLabel.count() > 0) {
                  matchCount++;
                }
              }

              console.log(`üßµ C√≥ ${matchCount}/${total} s·∫£n ph·∫©m kh·ªõp v·ªõi b·ªô l·ªçc size "S"`);

              // C√≥ th·ªÉ th√™m assert n·∫øu b·∫°n k·ª≥ v·ªçng ph·∫£i c√≥ √≠t nh·∫•t 1 k·∫øt qu·∫£
              expect(matchCount).toBeGreaterThan(0);
          }
        }
      }
    });

    test('TC_SORT_001: S·∫Øp x·∫øp theo gi√°', async ({ page }) => {
      const items = [ 'priceAsc', 'priceDesc' ];
      // V√†o trang c√≥ nhi·ªÅu s·∫£n ph·∫©m
      for (const item of items) {
        await page.goto(BASE_URL);
        
        // Click v√†o danh m·ª•c √ÅO VEST
        const MenuItem = page.locator('li.tp_menu_item', { hasText: '√ÅO VEST' });
        if (await MenuItem.count() > 0) {
          await MenuItem.first().click();

          // ƒê·ª£i trang load
          await Promise.all([
            page.waitForLoadState('load', { timeout: 30000 }),
          ]);
          
          // Find sort select
          const sortSelect = page.locator('select#sortControl');
          try {
            await sortSelect.waitFor({ state: 'visible', timeout: 15000 });
            console.log(`S·ªë l∆∞·ª£ng sort select: ${await sortSelect.count()}`);
          } catch (error) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y #sortControl sau 15 gi√¢y: ${error}`);
            await page.screenshot({ path: 'debug-no-sort-select.png' });
            return; // Tho√°t test n·∫øu kh√¥ng t√¨m th·∫•y
          }

          if (await sortSelect.count() > 0) {
            // Select "Gi√° tƒÉng d·∫ßn"
            const option = sortSelect.locator(`option[value*="${item}"]`);
            const value = await option.getAttribute('value');
            if (value) {
              await sortSelect.selectOption(value);
            }


            // Wait for page to reload after sort
            await page.waitForLoadState('load', { timeout: 30000 });

            // Debug: Take screenshot after sort
            await page.screenshot({ path: 'debug-after-sort.png' });

            // L·∫•y danh s√°ch div ch·ª©a gi√°
            const priceContainers = await page.locator('div.price-new-old').elementHandles();
            const priceNumbers = [];

            for (const container of priceContainers) {
              const oldPriceEl = await container.$('.tp_product_price_old');
              let priceText;

              if (oldPriceEl) {
                priceText = await oldPriceEl.textContent();
              } else {
                const newPriceEl = await container.$('.tp_product_price');
                priceText = await newPriceEl?.textContent();
              }

              if (priceText) {
                const number = parseInt(priceText.replace(/[^\d]/g, ''));
                if (!isNaN(number)) {
                  priceNumbers.push(number);
                }
              }
            }

            console.log(`T√¨m th·∫•y ${priceNumbers.length} gi√° s·∫£n ph·∫©m.`);
            console.log('Gi√° sau s·∫Øp x·∫øp (5 gi√° ƒë·∫ßu):', priceNumbers.slice(0, 5));

            if (priceNumbers.length >= 2) {
              for (let i = 0; i < priceNumbers.length - 1; i++) {
                if(item === 'priceAsc') {
                const current = priceNumbers[i];
                const next = priceNumbers[i + 1];

                expect(current).toBeLessThanOrEqual(next);
                }else if(item === 'priceDesc') {
                const current = priceNumbers[i];
                const next = priceNumbers[i + 1];
                expect(current).toBeGreaterThanOrEqual(next);
                }
              }
            } else {
              console.warn(`‚ö†Ô∏è Kh√¥ng ƒë·ªß s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra s·∫Øp x·∫øp (${priceNumbers.length} s·∫£n ph·∫©m).`);
            }
          } else {
            console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y menu s·∫Øp x·∫øp (#sortControl).');
            await page.screenshot({ path: 'debug-no-sort-select.png' });
          }
        } else {
          await page.screenshot({ path: 'debug-no-search-input.png' });
        }
      }
    });


    test('TC_SORT_002: S·∫Øp x·∫øp theo t√™n A-Z', async ({ page }) => {
      const items = [ 'nameAsc', 'nameDesc' ];
      // V√†o trang c√≥ nhi·ªÅu s·∫£n ph·∫©m
      for (const item of items) {
        await page.goto(BASE_URL);
        
        // Click v√†o danh m·ª•c √ÅO VEST
        const MenuItem = page.locator('li.tp_menu_item', { hasText: '√ÅO VEST' });
        if (await MenuItem.count() > 0) {
          await MenuItem.first().click();

          // ƒê·ª£i trang load
          await Promise.all([
            page.waitForLoadState('load', { timeout: 30000 }),
          ]);
          
          // Find sort select
          const sortSelect = page.locator('select#sortControl');
          try {
            await sortSelect.waitFor({ state: 'visible', timeout: 15000 });
          } catch (error) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y #sortControl sau 15 gi√¢y: ${error}`);
            await page.screenshot({ path: 'debug-no-sort-name-select.png' });
            return; // Tho√°t test n·∫øu kh√¥ng t√¨m th·∫•y
          }

          if (await sortSelect.count() > 0) {
            const option = sortSelect.locator(`option[value*="${item}"]`);
            const value = await option.getAttribute('value');
            if (value) {
              await sortSelect.selectOption(value);
            }


            // Wait for page to reload after sort
            await page.waitForLoadState('load', { timeout: 30000 });

            // Debug: Take screenshot after sort
            await page.screenshot({ path: 'debug-after-name-sort.png' });
          
            // Ki·ªÉm tra s·∫Øp x·∫øp
            const productTitles = page.locator('.tp_product_name, h2');
            
            if (await productTitles.count() >= 2) {
              const count = await productTitles.count();
              for (let i = 0; i < count - 1; i++) {
                const titleA = (await productTitles.nth(i).textContent())?.trim() || '';
                const titleB = (await productTitles.nth(i + 1).textContent())?.trim() || '';

                if (item === 'nameAsc') {
                  expect(titleA.localeCompare(titleB)).toBeLessThanOrEqual(0);
                } else if (item === 'nameDesc') {
                  expect(titleA.localeCompare(titleB)).toBeGreaterThanOrEqual(0);
                }
              }
            }
          }
        } else {
          await page.screenshot({ path: 'debug-no-sort-select.png' });
        }
      }
    });
  });
});

