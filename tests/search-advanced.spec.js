// @ts-check
const { test, expect } = require('@playwright/test');
const { cp } = require('fs');

const BASE_URL = 'https://newday.com.vn/';

test.describe('New Day - Test t√¨m ki·∫øm n√¢ng cao', () => {

  test.beforeEach(async ({ page }) => {
    await page.goto(BASE_URL);
    await page.waitForLoadState('load', { timeout: 30000 });

  });

  test.describe('K·∫øt h·ª£p t√¨m ki·∫øm v√† l·ªçc', () => {

    test('TC_ADVANCED_001: T√¨m ki·∫øm v·ªõi b·ªô l·ªçc m√†u s·∫Øc v√† k√≠ch th∆∞·ªõc', async ({ page }) => {
      const keywords = 'ch√¢n v√°y';
      const color = 'ƒêEN';
      const size = 'M';

      // Navigate to the search page
      await page.goto(BASE_URL, { waitUntil: 'load', timeout: 30000 });

      // Debug: Log page content and take screenshot
      // console.log(await page.content());
      await page.screenshot({ path: 'debug-initial-page.png' });

      // Find and fill the search input
      const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
      if (await searchInput.count() > 0) {
        await searchInput.click();
        await page.keyboard.type(keywords);

        // Submit search
        await Promise.all([
          page.waitForLoadState('load', { timeout: 30000 }),
          page.keyboard.press('Enter'),
        ]);

        // Wait for results to load
        await page.waitForLoadState('load', { timeout: 30000 });
        await page.waitForSelector('.product-item, .product-card', { timeout: 15000 });

        // Debug: Log page content after search
        await page.screenshot({ path: 'debug-after-search.png' });

        // Apply color filter
        const colorFilterContainer = page.locator('.tp_product_category_filter_attribute', { has: page.locator('a:has-text("M√†u s·∫Øc")') });
        const colorFilter = page.locator(`.catalog_filters a.tag-choise:text-is("${color}")`);


        if (await colorFilter.count() > 0) {
          // Ensure the filter container is visible
          await page.waitForSelector('.tp_product_category_filter_attribute', { state: 'visible', timeout: 15000 });

          // Open color filter menu if needed
          const colorFilterToggle = page.locator('.item.active.first a:has-text("M√†u s·∫Øc")');
          if (await colorFilterToggle.count() > 0) {
            const isVisible = await colorFilterContainer.first().isVisible();
            if (!isVisible) {
              await colorFilterToggle.click();
              await page.waitForTimeout(1000); // Wait for menu to open
            }
          }

          // Debug: Check if color filter is visible
          console.log(`Color filter "${color}" visible: ${await colorFilter.first().isVisible()}`);
          await colorFilter.first().click();

          // Wait for results to update
          await page.waitForSelector('.product-item, .product-card', { timeout: 15000 });
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·ªô l·ªçc m√†u s·∫Øc "${color}". Ki·ªÉm tra selector ho·∫∑c HTML.`);
          await page.screenshot({ path: 'debug-no-color-filter.png' });
        }

        // Apply size filter
        const resultCountAfterSize = await applySizeFilter(page, size);

        // Handle pagination
        let totalResultCount = 0;
        let totalMatchedCount = 0;
        let hasNextPage = true;
        let currentPage = 1;

        while (hasNextPage) {
          await page.waitForLoadState('load', { timeout: 30000 });
          await page.waitForSelector('.product-item, .product-card', { timeout: 15000 });

          // Count and verify results
          const results = page.locator('.product-information, .product-card');
          const resultCount = await results.count();
          console.log(`üîç Trang ${currentPage}: t√¨m th·∫•y ${resultCount} k·∫øt qu·∫£`);
          totalResultCount += resultCount;

          let matchedCount = 0;
          for (let i = 0; i < resultCount; i++) {
            const itemText = await results.nth(i).innerText();
            const keywordArray = keywords.toLowerCase().split(' ');
            if (keywordArray.every(word => itemText.toLowerCase().includes(word))) {
              matchedCount++;
            }
          }
          totalMatchedCount += matchedCount;

          console.log(`üîç T√¨m "${keywords}" (trang ${currentPage}): t·ªïng ${resultCount}, kh·ªõp t·ª´ kh√≥a: ${matchedCount}`);

          // Take screenshot if no matches
          if (matchedCount === 0) {
            await page.screenshot({ path: `screenshot-${keywords.replace(/\s+/g, '-')}-page-${currentPage}.png` });
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ kh·ªõp cho t·ª´ kh√≥a: "${keywords}" tr√™n trang ${currentPage}`);
          }

          // Check and navigate to the next page
          const nextPageLink = page.locator(`.pagination a`, { hasText: `${currentPage + 1}` });
          if (await nextPageLink.count() > 0) {
            try {
              await Promise.all([
                page.waitForLoadState('load', { timeout: 30000 }),
                nextPageLink.click(),
              ]);
              currentPage++;
            } catch (error) {
              console.warn(`‚ö†Ô∏è L·ªói khi chuy·ªÉn trang ${currentPage + 1}: ${error}`);
              hasNextPage = false;
            }
          } else {
            hasNextPage = false;
          }
        }

        // Verify results
        console.log(`üîç T√≥m t·∫Øt "${keywords}" v·ªõi b·ªô l·ªçc m√†u ${color} v√† k√≠ch th∆∞·ªõc ${size}: t·ªïng ${totalResultCount}, kh·ªõp t·ª´ kh√≥a: ${totalMatchedCount}`);
        
        if (totalResultCount === 0) {
          console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o sau khi √°p d·ª•ng b·ªô l·ªçc m√†u ${color} v√† k√≠ch th∆∞·ªõc ${size}`);
          await page.screenshot({ path: `screenshot-no-results-${keywords.replace(/\s+/g, '-')}.png` });
        } else if (totalMatchedCount === 0) {
          console.warn(`‚ö†Ô∏è C√≥ k·∫øt qu·∫£ nh∆∞ng kh√¥ng kh·ªõp t·ª´ kh√≥a "${keywords}"`);
        } else {
          expect(totalMatchedCount).toBeGreaterThan(0); // Ensure at least one result matches
        }
      } else {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y input t√¨m ki·∫øm cho t·ª´ kh√≥a: "${keywords}"`);
        await page.screenshot({ path: 'debug-no-search-input.png' });
      }
    });

    /**
     * @param {import("playwright-core").Page} page
     * @param {string} size
     */
    async function applySizeFilter(page, size, timeout = 15000) {
      // Find the size filter container
      const sizeFilterContainer = page.locator('.tp_product_category_filter_attribute', { has: page.locator('a:has-text("K√≠ch th∆∞·ªõc")') });
      
      // Ensure the filter container is visible
      await page.waitForSelector('.tp_product_category_filter_attribute', { state: 'visible', timeout });

      // Open size filter menu if needed
      const sizeFilterToggle = page.locator('.item.active.first a:has-text("K√≠ch th∆∞·ªõc")');

      if (await sizeFilterToggle.count() > 0) {
        const isVisible = await sizeFilterContainer.first().isVisible();
        if (!isVisible) {
          await sizeFilterToggle.click();
          await page.waitForTimeout(1000); // Wait for menu to open
        }
      }

      // Find the specific size filter
      const sizeFilter = page.locator(`.catalog_filters a.tag-choise:text-is("${size}")`);
      
      if (await sizeFilter.count() > 0) {
        // Debug: Check if size filter is visible
        console.log(`Size filter "${size}" visible: ${await sizeFilter.first().isVisible()}`);
        await sizeFilter.first().click();

        // Wait for results to update
        await page.waitForSelector('.product-item, .product-card', { timeout });

        // Count results
        const results = page.locator('.product-item, .product-card');
        const resultCount = await results.count();

        console.log(`üîç √Åp d·ª•ng b·ªô l·ªçc k√≠ch th∆∞·ªõc "${size}": t·ªïng ${resultCount} k·∫øt qu·∫£`);
        return resultCount;
      } else {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·ªô l·ªçc k√≠ch th∆∞·ªõc "${size}". Ki·ªÉm tra selector ho·∫∑c HTML.`);
        await page.screenshot({ path: `debug-no-size-filter-${size}.png` });
        return 0;
      }
    }

    test('TC_ADVANCED_002: T√¨m ki·∫øm v·ªõi nhi·ªÅu t·ª´ kh√≥a', async ({ page }) => {
      const multiKeywords = [
        '√°o vest ng·∫Øn tay',
        'ch√¢n v√°y d√†i',
        'ƒë·∫ßm tweed c·ªï tr√≤n',
        'qu·∫ßn su√¥ng d√†i',
        'ch√¢n v√°y'
      ];

      // Ch·ªâ t·∫£i trang m·ªôt l·∫ßn
      await page.goto(BASE_URL, { waitUntil: 'load', timeout: 30000 });

      const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');

      for (const keywords of multiKeywords) {
        if (await searchInput.count() > 0) {
          // X√≥a n·ªôi dung c≈© v√† nh·∫≠p t·ª´ kh√≥a m·ªõi
          await searchInput.click();
          await page.keyboard.type(keywords);

          // Ch·ªù ƒëi·ªÅu h∆∞·ªõng sau khi nh·∫•n Enter
          await Promise.all([
            page.waitForLoadState('load', { timeout: 30000 }),
            page.keyboard.press('Enter'),
          ]);

          let totalResultCount = 0; // T·ªïng s·ªë k·∫øt qu·∫£ tr√™n t·∫•t c·∫£ c√°c trang
          let totalMatchedCount = 0; // T·ªïng s·ªë k·∫øt qu·∫£ kh·ªõp tr√™n t·∫•t c·∫£ c√°c trang
          let hasNextPage = true;
          let currentPage = 1;

          while (hasNextPage) {
            // Ch·ªù trang t·∫£i xong v√† ph·∫ßn t·ª≠ xu·∫•t hi·ªán
            await page.waitForLoadState('load', { timeout: 30000 });
            await page.waitForSelector('.product-lists, .product-information', { timeout: 10000 });

            // T·∫°o locator v√† ƒë·∫øm k·∫øt qu·∫£ tr√™n trang hi·ªán t·∫°i
            const results = page.locator('.product-lists, .product-information');
            const resultCount = await results.count();
            totalResultCount += resultCount;

            // Ki·ªÉm tra c√≥ k·∫øt qu·∫£
            expect(resultCount).toBeGreaterThan(0); // ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 1 k·∫øt qu·∫£ tr√™n trang

            // Ki·ªÉm tra k·∫øt qu·∫£ kh·ªõp t·ª´ kh√≥a
            let matchedCount = 0;
            for (let i = 0; i < resultCount; i++) {
              const itemText = await results.nth(i).innerText();
              const keywordArray = keywords.toLowerCase().split(' ');
              if (keywordArray.every(word => itemText.toLowerCase().includes(word))) {
                matchedCount++;
              }
            }
            totalMatchedCount += matchedCount;

            console.log(`üîç T√¨m "${keywords}" (trang ${currentPage}): t·ªïng ${resultCount}, kh·ªõp t·ª´ kh√≥a: ${matchedCount}`);

            // L∆∞u screenshot n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ kh·ªõp
            if (matchedCount === 0) {
              await page.screenshot({ path: `screenshot-${keywords.replace(/\s+/g, '-')}-page-${currentPage}.png` });
              console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ kh·ªõp cho t·ª´ kh√≥a: "${keywords}" tr√™n trang ${currentPage}`);
            }

            // Ki·ªÉm tra ph√¢n trang
            const paginationLinks = page.locator('.pagination a');
            const nextPageLink = page.locator('.pagination a:text("¬ª")');
            if (await nextPageLink.count() > 0) {
              // Chuy·ªÉn sang trang ti·∫øp theo
              await Promise.all([
                page.waitForLoadState('load', { timeout: 30000 }),
                nextPageLink.click(),
              ]);
              currentPage++;
            } else {
              hasNextPage = false; // Kh√¥ng c√≤n trang ti·∫øp theo
            }
          }

          console.log(`üîç T√≥m t·∫Øt "${keywords}": t·ªïng ${totalResultCount}, kh·ªõp t·ª´ kh√≥a: ${totalMatchedCount}`);

          // Ki·ªÉm tra √≠t nh·∫•t 1 k·∫øt qu·∫£ kh·ªõp tr√™n t·∫•t c·∫£ c√°c trang
          expect(totalMatchedCount).toBeGreaterThan(0);
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y input t√¨m ki·∫øm cho t·ª´ kh√≥a: "${keywords}"`);
        }
      }
    });




  });

  test.describe('Test Performance v√† UX', () => {

    test('TC_PERF_001: Th·ªùi gian ph·∫£n h·ªìi t√¨m ki·∫øm', async ({ page }) => {
      const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
      
      if (await searchInput.count() > 0) {
        const startTime = Date.now();
        
        await searchInput.click();
        await page.keyboard.type('√°o vest');

        await Promise.all([
          page.waitForLoadState('load', { timeout: 30000 }),
          page.keyboard.press('Enter')
        ]);        
        // ƒê·ª£i k·∫øt qu·∫£ xu·∫•t hi·ªán
        await page.waitForSelector('.product-detail, .product-image', { timeout: 5000 });
        
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        console.log(`Th·ªùi gian ph·∫£n h·ªìi t√¨m ki·∫øm: ${responseTime}ms`);
        
        // Y√™u c·∫ßu th·ªùi gian ph·∫£n h·ªìi < 3 gi√¢y
        expect(responseTime).toBeLessThan(3000);
      }
    });


    test('TC_UX_001: G·ª£i √Ω t√¨m ki·∫øm (autocomplete)', async ({ page }) => {
      const keyword = '√°o';

      const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');

      if (await searchInput.count() > 0) {
        await searchInput.click();
        await page.keyboard.type(keyword);

        const suggestionDropdown = page.locator('#searchFolding');
        const suggestionItems = suggestionDropdown.locator('a');

        // ‚è≥ Ch·ªù t·ªõi khi c√≥ √≠t nh·∫•t 1 g·ª£i √Ω th·ª±c s·ª± xu·∫•t hi·ªán
        await page.waitForFunction(() => {
          const el = document.querySelector('#searchFolding');
          // @ts-ignore
          return el && el.style && el.style.display !== 'none' && el.querySelectorAll('a').length > 0;
        }, null, { timeout: 5000 });


        const count = await suggestionItems.count();
        console.log(`S·ªë l∆∞·ª£ng g·ª£i √Ω: ${count}`);
        expect(count).toBeGreaterThan(0);


        let allMatched = true;

        for (let i = 0; i < count; i++) {
          const text = await suggestionItems.nth(i).innerText();

          if (!text.toLowerCase().includes(keyword.toLowerCase())) {
            console.warn(`‚ùå G·ª£i √Ω ${i + 1} KH√îNG ch·ª©a t·ª´ kh√≥a "${keyword}"`);
            allMatched = false;
          }
        }

        // Ch·ªâ pass n·∫øu t·∫•t c·∫£ g·ª£i √Ω ƒë·ªÅu ch·ª©a t·ª´ kh√≥a
        expect(allMatched).toBeTruthy();
      }
    });
  });


  test.describe('Test Edge Cases', () => {

    test('TC_EDGE_001: T√¨m ki·∫øm v·ªõi k√Ω t·ª± Unicode', async ({ page }) => {
      const unicodeKeywords = [
        '√°o üëó',
        'ƒë·∫ßm ‚ú®',
        'v√°y üå∏',
        '√ëew Da·ª≥'
      ];

      for (const keyword of unicodeKeywords) {
        await page.goto(BASE_URL);
        await page.waitForLoadState('load', { timeout: 30000 });

        const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
        
        if (await searchInput.count() > 0) {
          await searchInput.fill(keyword);

          await Promise.all([
          page.waitForLoadState('load', { timeout: 30000 }),
          page.keyboard.press('Enter')
        ]);
        await page.waitForLoadState('load', { timeout: 30000 });

          // Ki·ªÉm tra kh√¥ng b·ªã crash
          await expect(page.locator('body')).toBeVisible();
          console.log(`T√¨m ki·∫øm Unicode "${keyword}": OK`);
        }
      }
    });

    test('TC_EDGE_002: T√¨m ki·∫øm chu·ªói r·∫•t d√†i', async ({ page }) => {
      const longString = '√°o vest d√†i tay m√†u xanh than ch·∫•t li·ªáu voan t∆° nh≈© l·∫•p l√°nh c·ªï tr√≤n ki·ªÉu d√°ng su√¥ng phong c√°ch hi·ªán ƒë·∫°i tr·∫ª trung nƒÉng ƒë·ªông ph√π h·ª£p ƒëi l√†m ƒëi ch∆°i'.repeat(3);
      
      const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
      
      if (await searchInput.count() > 0) {
        await searchInput.fill(longString);

        await Promise.all([
          page.waitForLoadState('load', { timeout: 30000 }),
          page.keyboard.press('Enter')
        ]);
        await page.waitForLoadState('load', { timeout: 30000 });

        // Ki·ªÉm tra x·ª≠ l√Ω chu·ªói d√†i
        await expect(page.locator('body')).toBeVisible();
        console.log(`ƒê·ªô d√†i chu·ªói t√¨m ki·∫øm: ${longString.length} k√Ω t·ª±`);
      }
    });

    test('TC_EDGE_003: SQL Injection trong t√¨m ki·∫øm', async ({ page }) => {
      const sqlInjectionAttempts = [
        "'; DROP TABLE products; --",
        "1' OR '1'='1",
        "' UNION SELECT * FROM users --",
        "<script>alert('xss')</script>"
      ];

      for (const injection of sqlInjectionAttempts) {
        await page.goto(BASE_URL);
        await page.waitForLoadState('load', { timeout: 30000 });

        const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
        
        if (await searchInput.count() > 0) {
          await searchInput.fill(injection);

          await Promise.all([
            page.keyboard.press('Enter'),
            page.waitForNavigation({ waitUntil: 'load', timeout: 30000 })
          ]);

          // Ki·ªÉm tra website v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
          await expect(page).toHaveURL(/newday\.com\.vn/);
          await expect(page.locator('body')).toBeVisible();
          
          // Kh√¥ng c√≥ alert box xu·∫•t hi·ªán
          const alertDialog = page.locator('role=dialog');
          expect(await alertDialog.count()).toBe(0);
          
          console.log(`SQL Injection test "${injection}": ƒê∆∞·ª£c x·ª≠ l√Ω an to√†n`);
        }
      }
    });

    test('TC_EDGE_004: T√¨m ki·∫øm li√™n t·ª•c (stress test)', async ({ page }) => {
      const keywords = ['√°o', 'ƒë·∫ßm', 'qu·∫ßn', 'v√°y', 'vest'];
      
      for (let i = 0; i < 5; i++) {
        for (const keyword of keywords) {

          await page.waitForLoadState('load', { timeout: 30000 });
          const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
          
          if (await searchInput.count() > 0) {
            await searchInput.fill(keyword);

            await Promise.all([
              page.waitForLoadState('load', { timeout: 30000 }),
              page.keyboard.press('Enter')
            ]);
            await page.waitForTimeout(500); // ƒê·ª£i ng·∫Øn gi·ªØa c√°c l·∫ßn t√¨m
          }
        }
      }
      
      // Ki·ªÉm tra website v·∫´n ·ªïn ƒë·ªãnh
      await expect(page.locator('body')).toBeVisible();
      console.log('Stress test ho√†n th√†nh: Website v·∫´n ·ªïn ƒë·ªãnh');
    });
  });

  test.describe('Test Accessibility', () => {

    test('TC_A11Y_001: Keyboard navigation cho t√¨m ki·∫øm', async ({ page }) => {
      await page.goto(BASE_URL);
      
      // Tab ƒë·∫øn search input
      await page.keyboard.press('Tab');
      await page.keyboard.press('Tab');
      
      const focusedElement = page.locator(':focus');
      
      // Ki·ªÉm tra c√≥ th·ªÉ focus v√†o search input
      if (await focusedElement.count() > 0) {
        await focusedElement.type('√°o vest');
        await page.keyboard.press('Enter');
        await page.waitForLoadState('load', { timeout: 30000 });

        await expect(page.locator('.product-item, .product-card')).toBeVisible();
      }
    });

    test('TC_A11Y_002: Screen reader support', async ({ page }) => {
      await page.goto(BASE_URL);
      
      // Ki·ªÉm tra aria labels v√† alt text
      const searchInput = page.locator('input[type="search"], .search-input');
      
      if (await searchInput.count() > 0) {
        const ariaLabel = await searchInput.getAttribute('aria-label');
        const placeholder = await searchInput.getAttribute('placeholder');
        
        // Search input n√™n c√≥ label ho·∫∑c placeholder ƒë·ªÉ screen reader ƒë·ªçc ƒë∆∞·ª£c
        expect(ariaLabel || placeholder).toBeTruthy();
      }

      // Ki·ªÉm tra h√¨nh ·∫£nh c√≥ alt text
      const productImages = page.locator('.product-item img, .product-card img');
      
      if (await productImages.count() > 0) {
        const firstImage = productImages.first();
        const altText = await firstImage.getAttribute('alt');
        
        expect(altText).toBeTruthy();
        expect(altText?.length).toBeGreaterThan(0);
      }
    });
  });

  test.describe('Test Integration', () => {

    test('TC_INT_001: T√≠ch h·ª£p gi·ªØa search, ch·ªçn thu·ªôc t√≠nh v√† gi·ªè h√†ng', async ({ page }) => {
  await page.goto(BASE_URL);

  const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');

  if (await searchInput.count() > 0) {
    await searchInput.fill('√°o vest');

    // T√¨m ki·∫øm v√† ch·ªù ƒëi·ªÅu h∆∞·ªõng
    await Promise.all([
      page.keyboard.press('Enter'),
      page.waitForLoadState('load', { timeout: 30000 }),
    ]);

    // Nh·∫•n v√†o n√∫t Th√™m v√†o gi·ªè h√†ng ƒë·∫ßu ti√™n (m·ªü form chi ti·∫øt)
    const addToCartBtn = page.locator('text="Th√™m v√†o gi·ªè h√†ng"').first();
    await expect(addToCartBtn).toBeVisible({ timeout: 5000 });
    await addToCartBtn.click();
    await page.waitForTimeout(1000);

    // --- Ch·ªçn m√†u s·∫Øc ---
    const colorOptions = page.locator('.colornew a');
    let colorSelected = false;

    if (await colorOptions.count() > 0) {
      await colorOptions.first().click(); // ch·ªçn m√†u ƒë·∫ßu ti√™n
      await page.waitForTimeout(500);
      colorSelected = true;
    }

    // --- Ch·ªçn k√≠ch th∆∞·ªõc ch·ªâ khi ƒë√£ ch·ªçn m√†u s·∫Øc ---
    if (colorSelected) {
      const sizeOptions = page.locator('.sizenew a');
      const sizeCount = await sizeOptions.count();

      if (sizeCount > 0) {
        await expect(sizeOptions.first()).toBeVisible({ timeout: 5000 });
        await sizeOptions.first().click(); // ch·ªçn size ƒë·∫ßu ti√™n
      } else {
        throw new Error('‚ùå Kh√¥ng c√≥ t√πy ch·ªçn k√≠ch th∆∞·ªõc!');
      }
    } else {
      throw new Error('‚ùå Kh√¥ng ch·ªçn ƒë∆∞·ª£c m√†u s·∫Øc!');
    }

    // --- TƒÉng s·ªë l∆∞·ª£ng ---
    const quantityInput = page.locator('#quantity_qv');
    const increaseBtn = page.locator('.plus-one');

    await expect(quantityInput).toBeVisible();
    await expect(quantityInput).toHaveValue('1');

    await increaseBtn.click(); // tƒÉng l√™n 2
    await expect(quantityInput).toHaveValue('2');

    // --- Nh·∫•n l·∫°i v√†o Th√™m v√†o gi·ªè h√†ng (trong form chi ti·∫øt) ---
    const finalAddBtn = page.locator('#addToCartQv');
    if (await finalAddBtn.count() > 0) {
      await finalAddBtn.first().click();
      await page.waitForTimeout(1000);
    }
    
    const acceptBtn = page.locator('#close-modal');
    if (await acceptBtn.count() > 0) {
      await acceptBtn.click();
      await page.waitForTimeout(1000);
    } else {
      throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t ƒë√≥ng modal!');
    }

    // --- Ki·ªÉm tra gi·ªè h√†ng ---
    const cartCount = page.locator('.fa-shopping-cart');
    if (await cartCount.count() > 0) {
      await cartCount.click(); // m·ªü gi·ªè h√†ng
    }else {
      throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y bi·ªÉu t∆∞·ª£ng gi·ªè h√†ng!');
    }

    // ƒê·ª£i t·ªëi ƒëa 5 gi√¢y cho ƒë·∫øn khi ph·∫ßn t·ª≠ xu·∫•t hi·ªán trong DOM
    await cartCount.waitFor({ state: 'visible', timeout: 5000 });

    const qtyInput = page.locator('.product-qty input');
    await expect(qtyInput).toBeVisible({ timeout: 5000 });

    const qtyValue = await qtyInput.getAttribute('value');
    console.log('S·ªë l∆∞·ª£ng trong gi·ªè h√†ng:', qtyValue);

    expect(parseInt(qtyValue || '0')).toBeGreaterThan(0);


    console.log('‚úÖ PASS: T√¨m ki·∫øm ‚Üí ch·ªçn m√†u + size ‚Üí tƒÉng SL ‚Üí th√™m gi·ªè h√†ng');
  } else {
    throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm!');
  }
});





    test('TC_INT_002: Li√™n k·∫øt gi·ªØa category v√† search', async ({ page }) => {
      await page.goto(BASE_URL);
      
      // Click v√†o category
      const vestCategory = page.locator('ul.menu-top >> text="ƒê·∫¶M"').first();
      
      if (await vestCategory.isVisible()) {
        await vestCategory.click();
        await page.waitForLoadState('load', { timeout: 30000 });

        // Th·ª±c hi·ªán search trong category
        const searchInput = page.locator('input[type="search"], input[placeholder*="t√¨m"], .search-input, #search');
        console.log(await searchInput.count())
        
        if (await searchInput.count() > 0) {
          await searchInput.click()
          await page.keyboard.type('tweed');

          await Promise.all([
            page.waitForLoadState('networkidle', { timeout: 30000 }),
            page.keyboard.press('Enter')
          ]);

          // K·∫øt qu·∫£ n√™n v·ª´a thu·ªôc category ƒë·∫ßm v·ª´a match "tweed"
          const results = page.locator('.product-detail, .product-card');
          
          if (await results.count() > 0) {
            const titles = await results.locator('.product-detail, .product-info, h2').allTextContents();
            console.log("S·ªë k·∫øt qu·∫£",titles)

            // Ki·ªÉm tra m·ªçi s·∫£n ph·∫©m ƒë·ªÅu ch·ª©a c·∫£ "ƒë·∫ßm" v√† "tweed"
            const allRelevant = titles.every(title => 
              title.toLowerCase().includes('ƒë·∫ßm') && 
              title.toLowerCase().includes('tweed')
            );

            // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√≥
            expect(allRelevant).toBe(true);
          }
        }
      }
    });
  });
});